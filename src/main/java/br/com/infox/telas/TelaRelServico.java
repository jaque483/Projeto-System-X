/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package br.com.infox.telas;

import br.com.infox.dal.ModuloConexao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author jaque
 */
public class TelaRelServico extends javax.swing.JInternalFrame {

    /**
     * Creates new form TelaRelServico
     */
    public TelaRelServico() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextVisu = new javax.swing.JTextArea();
        btnVisualizar = new javax.swing.JButton();
        txtPesquisarNome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Relatório de Serviços");

        jTextVisu.setColumns(20);
        jTextVisu.setRows(5);
        jScrollPane1.setViewportView(jTextVisu);

        btnVisualizar.setText("Visualizar todos");
        btnVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarActionPerformed(evt);
            }
        });

        txtPesquisarNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarNomeActionPerformed(evt);
            }
        });

        jLabel1.setText("Pesquisar por nome de cliente");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPesquisarNome, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(btnVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPesquisarNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(btnVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarActionPerformed
     jTextVisu.setText(""); // Limpa o conteúdo anterior

    try {
        // Conecta ao banco de dados
        Connection con = ModuloConexao.conector();
        String query = "SELECT tbos.os, tbos.data_os, tbos.equipamento, tbos.defeito, tbos.servico, tbos.tecnico, tbos.valor, tbclientes.nomecli " +
                       "FROM tbos " +
                       "INNER JOIN tbclientes ON tbos.idcli = tbclientes.idcli";  // Faz o JOIN para trazer o nome do cliente
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        // Exibe os resultados na JTextArea
        while (rs.next()) {
            String os = rs.getString("os");
            String dataOs = rs.getString("data_os");
            String equipamento = rs.getString("equipamento");
            String defeito = rs.getString("defeito");
            String servico = rs.getString("servico");
            String tecnico = rs.getString("tecnico");
            double valor = rs.getDouble("valor");
            String nomeCliente = rs.getString("nomecli");  // Obtém o nome do cliente

            // Adiciona as informações no formato desejado na JTextArea
            jTextVisu.append("OS: " + os + "\n");
            jTextVisu.append("Cliente: " + nomeCliente + "\n");  // Adiciona o nome do cliente
            jTextVisu.append("Data: " + dataOs + "\n");
            jTextVisu.append("Equipamento: " + equipamento + "\n");
            jTextVisu.append("Defeito: " + defeito + "\n");
            jTextVisu.append("Serviço: " + servico + "\n");
            jTextVisu.append("Técnico: " + tecnico + "\n");
            jTextVisu.append("Valor: R$ " + valor + "\n");
            jTextVisu.append("--------------------------------------\n");
        }

        rs.close();
        stmt.close();
        con.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Erro ao buscar OCs: " + e.getMessage());
    }
    }//GEN-LAST:event_btnVisualizarActionPerformed

    private void txtPesquisarNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarNomeActionPerformed
        // TODO add your handling code here:
           String nomeCliente = txtPesquisarNome.getText().trim();  // Obtém o nome inserido no campo de pesquisa

    if (!nomeCliente.isEmpty()) {  // Verifica se o campo não está vazio
        try {
            // Conecta ao banco de dados
            Connection con = ModuloConexao.conector();
            String query = "SELECT tbos.os, tbos.data_os, tbos.equipamento, tbos.defeito, tbos.servico, tbos.tecnico, tbos.valor, tbclientes.nomecli " +
                           "FROM tbos " +
                           "INNER JOIN tbclientes ON tbos.idcli = tbclientes.idcli " +
                           "WHERE tbclientes.nomecli LIKE ?";  // Filtra pela pesquisa do nome
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, "%" + nomeCliente + "%");  // Adiciona o nome do cliente com curinga para buscar parcial
            ResultSet rs = pst.executeQuery();

            // Limpa o campo de exibição antes de mostrar os novos resultados
            jTextVisu.setText("");

            // Exibe os resultados na JTextArea
            while (rs.next()) {
                String os = rs.getString("os");
                String dataOs = rs.getString("data_os");
                String equipamento = rs.getString("equipamento");
                String defeito = rs.getString("defeito");
                String servico = rs.getString("servico");
                String tecnico = rs.getString("tecnico");
                double valor = rs.getDouble("valor");
                String nomeClienteResultado = rs.getString("nomecli");  // Nome do cliente

                // Adiciona as informações no formato desejado na JTextArea
                jTextVisu.append("OS: " + os + "\n");
                jTextVisu.append("Cliente: " + nomeClienteResultado + "\n");  // Exibe o nome do cliente
                jTextVisu.append("Data: " + dataOs + "\n");
                jTextVisu.append("Equipamento: " + equipamento + "\n");
                jTextVisu.append("Defeito: " + defeito + "\n");
                jTextVisu.append("Serviço: " + servico + "\n");
                jTextVisu.append("Técnico: " + tecnico + "\n");
                jTextVisu.append("Valor: R$ " + valor + "\n");
                jTextVisu.append("--------------------------------------\n");
            }

            rs.close();
            pst.close();
            con.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Erro ao buscar ordens de serviço: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, insira um nome para pesquisa.");
    }
        
        
    }//GEN-LAST:event_txtPesquisarNomeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnVisualizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextVisu;
    private javax.swing.JTextField txtPesquisarNome;
    // End of variables declaration//GEN-END:variables
}
